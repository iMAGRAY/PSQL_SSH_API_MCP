#!/usr/bin/env node

// üöÄ PostgreSQL + API + SSH MCP –°–ï–†–í–ï–† v3.0.0 - –ú–û–î–£–õ–¨–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –º–æ–¥—É–ª–∏ –∏–∑ /src —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π

const { Server } = require("@modelcontextprotocol/sdk/server/index.js");
const { StdioServerTransport } = require("@modelcontextprotocol/sdk/server/stdio.js");
const { CallToolRequestSchema, ListToolsRequestSchema } = require("@modelcontextprotocol/sdk/types.js");

// –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π
const PostgreSQLManager = require('./src/database/postgresql.cjs');
const SSHManager = require('./src/ssh/index.cjs');
const APIManager = require('./src/api/index.cjs');
const Logger = require('./src/logger/index.cjs');

const server = new Server({
  name: "postgresql-api-ssh-mcp-server",
  version: "3.0.0"
}, {
  capabilities: { tools: {} }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
let pgManager, sshManager, apiManager;
try {
  pgManager = new PostgreSQLManager();
  sshManager = new SSHManager();
  apiManager = new APIManager();
  Logger.info('All modules loaded successfully');
} catch (error) {
  Logger.error('Failed to load modules', { error: error.message });
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π:', error.message);
}

// üêò PostgreSQL Manager Handler
async function handlePostgreSQLManager(args) {
  try {
    if (!pgManager) {
      throw new Error('PostgreSQL –º–æ–¥—É–ª—å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
    }

    const result = await pgManager.handleAction(args);
    
    return {
      content: [{
        type: "text",
        text: JSON.stringify({
          status: "success",
          ...result
        }, null, 2)
      }]
    };
  } catch (error) {
    Logger.error('PostgreSQL operation failed', { action: args.action, error: error.message });
    
    return {
      content: [{
        type: "text",
        text: JSON.stringify({
          status: "error",
          error: error.message,
          action: args.action,
          ai_hint: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"
        }, null, 2)
      }],
      isError: true
    };
  }
}

// üîê SSH Manager Handler
async function handleSSHManager(args) {
  try {
    if (!sshManager) {
      throw new Error('SSH –º–æ–¥—É–ª—å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
    }

    const result = await sshManager.handleAction(args);
    
    return {
      content: [{
        type: "text",
        text: JSON.stringify({
          status: "success",
          ...result
        }, null, 2)
      }]
    };
  } catch (error) {
    Logger.error('SSH operation failed', { action: args.action, error: error.message });
    
    return {
      content: [{
        type: "text",
        text: JSON.stringify({
          status: "error",
          error: error.message,
          action: args.action,
          ai_hint: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º"
        }, null, 2)
      }],
      isError: true
    };
  }
}

// üåê API Manager Handler
async function handleAPIManager(args) {
  try {
    if (!apiManager) {
      throw new Error('API –º–æ–¥—É–ª—å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
    }

    const result = await apiManager.handleAction(args);
    
    return {
      content: [{
        type: "text",
        text: JSON.stringify({
          status: "success",
          ...result
        }, null, 2)
      }]
    };
  } catch (error) {
    Logger.error('API operation failed', { method: args.method, error: error.message });
    
    return {
      content: [{
        type: "text",
        text: JSON.stringify({
          status: "error",
          error: error.message,
          method: args.method,
          url: args.url,
          ai_hint: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞"
        }, null, 2)
      }],
      isError: true
    };
  }
}

// üìã –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ MCP
server.setRequestHandler(ListToolsRequestSchema, async () => ({
  tools: [
    {
      name: "postgresql_manager",
      description: "üêò PostgreSQL –ú–ï–ù–ï–î–ñ–ï–† - –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: setup_profile, list_profiles, quick_query, show_tables, describe_table, sample_data, insert_data, update_data, delete_data, database_info. –ó–∞—â–∏—Ç–∞ –æ—Ç SQL injection, —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π, –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.",
      inputSchema: {
        type: "object",
        properties: {
          action: {
            type: "string",
            enum: [
              "setup_profile", "list_profiles", "quick_query", "show_tables", 
              "describe_table", "sample_data", "insert_data", "update_data", 
              "delete_data", "database_info"
            ],
            description: "–î–µ–π—Å—Ç–≤–∏–µ PostgreSQL"
          },
          profile_name: {
            type: "string",
            description: "–ò–º—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'default')"
          },
          host: { type: "string", description: "–•–æ—Å—Ç PostgreSQL" },
          port: { type: "integer", description: "–ü–æ—Ä—Ç PostgreSQL" },
          username: { type: "string", description: "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è PostgreSQL" },
          password: { type: "string", description: "–ü–∞—Ä–æ–ª—å PostgreSQL" },
          database: { type: "string", description: "–ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö" },
          sql: { type: "string", description: "SQL –∑–∞–ø—Ä–æ—Å" },
          table_name: { type: "string", description: "–ò–º—è —Ç–∞–±–ª–∏—Ü—ã" },
          data: { type: "object", description: "–î–∞–Ω–Ω—ã–µ –¥–ª—è insert/update" },
          where: { type: "string", description: "WHERE —É—Å–ª–æ–≤–∏–µ" },
          limit: { type: "integer", description: "–õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π" }
        },
        required: ["action"]
      }
    },
    {
      name: "ssh_manager",
      description: "üîê SSH –ú–ï–ù–ï–î–ñ–ï–† - –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ SSH –æ–ø–µ—Ä–∞—Ü–∏–∏: setup_profile, list_profiles, execute, system_info, check_host. –ó–∞—â–∏—Ç–∞ –æ—Ç command injection, —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.",
      inputSchema: {
        type: "object",
        properties: {
          action: {
            type: "string",
            enum: ["setup_profile", "list_profiles", "execute", "system_info", "check_host"],
            description: "–î–µ–π—Å—Ç–≤–∏–µ SSH"
          },
          profile_name: {
            type: "string",
            description: "–ò–º—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'default')"
          },
          host: { type: "string", description: "–•–æ—Å—Ç SSH —Å–µ—Ä–≤–µ—Ä–∞" },
          port: { type: "integer", description: "–ü–æ—Ä—Ç SSH" },
          username: { type: "string", description: "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è SSH" },
          password: { type: "string", description: "–ü–∞—Ä–æ–ª—å SSH" },
          command: { type: "string", description: "–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è" }
        },
        required: ["action"]
      }
    },
    {
      name: "universal_api_client",
      description: "üåê API –ö–õ–ò–ï–ù–¢ - –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã: get, post, put, delete, patch, check_api. –í–∞–ª–∏–¥–∞—Ü–∏—è URL, —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, –∑–∞—â–∏—Ç–∞ –æ—Ç SSRF, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö.",
      inputSchema: {
        type: "object",
        properties: {
          action: {
            type: "string",
            enum: ["get", "post", "put", "delete", "patch", "check_api"],
            description: "HTTP –¥–µ–π—Å—Ç–≤–∏–µ"
          },
          url: { type: "string", description: "URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞" },
          headers: { type: "object", description: "HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏" },
          data: { type: "object", description: "–î–∞–Ω–Ω—ã–µ –¥–ª—è POST/PUT/PATCH" },
          auth_token: { type: "string", description: "Bearer —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏" }
        },
        required: ["action", "url"]
      }
    }
  ]
}));

// üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–∑–æ–≤–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
server.setRequestHandler(CallToolRequestSchema, async (request) => {
  const { name, arguments: args } = request.params;
  
  try {
    Logger.info('Tool called', { name, action: args.action });
    
    switch (name) {
      case "postgresql_manager":
        return await handlePostgreSQLManager(args);
      case "ssh_manager":
        return await handleSSHManager(args);
      case "universal_api_client":
        return await handleAPIManager(args);
      default:
        return {
          content: [{
            type: "text",
            text: JSON.stringify({
              status: "error",
              error: `‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: ${name}`,
              available_tools: ["postgresql_manager", "ssh_manager", "universal_api_client"]
            }, null, 2)
          }],
          isError: true
        };
    }
  } catch (error) {
    Logger.error('Tool execution failed', { name, error: error.message });
    
    return {
      content: [{
        type: "text",
        text: JSON.stringify({
          status: "error",
          error: `‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ${name}: ${error.message}`,
          timestamp: new Date().toISOString()
        }, null, 2)
      }],
      isError: true
    };
  }
});

// üöÄ –ó–∞–ø—É—Å–∫ MCP —Å–µ—Ä–≤–µ—Ä–∞
async function main() {
  try {
    const transport = new StdioServerTransport();
    await server.connect(transport);
    
    console.error("üöÄ PostgreSQL API SSH MCP Server v3.0.0 –∑–∞–ø—É—â–µ–Ω (–ú–û–î–£–õ–¨–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê)");
    console.error("‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –º–æ–¥—É–ª–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π");
    console.error("üîí –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π, –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö, —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö");
    console.error(`üìä –ú–æ–¥—É–ª–∏: PostgreSQL=${!!pgManager}, SSH=${!!sshManager}, API=${!!apiManager}`);
    
    process.on('SIGINT', () => {
      console.error('üíæ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
      process.exit(0);
    });
    
    process.stdin.resume();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  }
}

main().catch(console.error); 