// üîê –°–ò–°–¢–ï–ú–ê –í–ê–õ–ò–î–ê–¶–ò–ò
// –ó–∞—â–∏—Ç–∞ –æ—Ç SQL injection –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

const { VALIDATION_PATTERNS, SECURITY_LIMITS, ACTIONS } = require('../constants/index.cjs');
const logger = require('../logger/index.cjs');

class ValidationError extends Error {
  constructor(message, field, value) {
    super(message);
    this.name = 'ValidationError';
    this.field = field;
    this.value = value;
  }
}

class Validator {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ SQL injection
  static checkSQLInjection(input, fieldName) {
    if (typeof input !== 'string') return true;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–∞–º—ã–µ –æ–ø–∞—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è non-SQL –ø–æ–ª–µ–π
    const suspiciousPatterns = [
      /['";]/g,               // –û–ø–∞—Å–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
      /--/g,                  // SQL –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏  
      /\/\*[\s\S]*?\*\//g,    // –ë–ª–æ—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
      /\b(DROP|DELETE|TRUNCATE|ALTER|GRANT|REVOKE)\s+/gi,  // –û–ø–∞—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
      /\b(XP_|SP_)\w+/gi      // –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
    ];

    for (const pattern of suspiciousPatterns) {
      if (pattern.test(input)) {
        logger.security('SQL injection attempt detected', { field: fieldName, value: input });
        throw new ValidationError(
          `–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è SQL injection –≤ –ø–æ–ª–µ ${fieldName}`,
          fieldName,
          input
        );
      }
    }
    return true;
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ç–∞–±–ª–∏—Ü—ã
  static validateTableName(tableName) {
    if (!tableName || typeof tableName !== 'string') {
      throw new ValidationError('–ò–º—è —Ç–∞–±–ª–∏—Ü—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π', 'table_name', tableName);
    }

    if (!VALIDATION_PATTERNS.TABLE_NAME.test(tableName)) {
      throw new ValidationError(
        '–ò–º—è —Ç–∞–±–ª–∏—Ü—ã –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è',
        'table_name',
        tableName
      );
    }

    if (tableName.length > 63) {
      throw new ValidationError('–ò–º—è —Ç–∞–±–ª–∏—Ü—ã —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 63 —Å–∏–º–≤–æ–ª–∞)', 'table_name', tableName);
    }

    return true;
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –∫–æ–ª–æ–Ω–∫–∏
  static validateColumnName(columnName) {
    if (!columnName || typeof columnName !== 'string') {
      throw new ValidationError('–ò–º—è –∫–æ–ª–æ–Ω–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π', 'column_name', columnName);
    }

    if (!VALIDATION_PATTERNS.COLUMN_NAME.test(columnName)) {
      throw new ValidationError(
        '–ò–º—è –∫–æ–ª–æ–Ω–∫–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è',
        'column_name',
        columnName
      );
    }

    return true;
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è SQL –∑–∞–ø—Ä–æ—Å–∞
  static validateSQL(sql) {
    if (!sql || typeof sql !== 'string') {
      throw new ValidationError('SQL –∑–∞–ø—Ä–æ—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω', 'sql', sql);
    }

    if (sql.length > SECURITY_LIMITS.MAX_QUERY_LENGTH) {
      throw new ValidationError(
        `SQL –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º ${SECURITY_LIMITS.MAX_QUERY_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤)`,
        'sql',
        sql
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ–ø–∞—Å–Ω—ã–µ SQL injection –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ SQL
    const sqlInjectionPatterns = [
      /[';]/g,                // –û–¥–∏–Ω–æ—á–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –∏ —Ç–æ—á–∫–∏ —Å –∑–∞–ø—è—Ç–æ–π –≤ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
      /--/g,                  // SQL –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
      /\/\*[\s\S]*?\*\//g,    // –ë–ª–æ—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
      /\b(XP_|SP_)\w+/gi      // –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã
    ];

    for (const pattern of sqlInjectionPatterns) {
      if (pattern.test(sql)) {
        logger.security('SQL injection attempt in SQL query', { sql });
        throw new ValidationError(
          'SQL –∑–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã',
          'sql',
          sql
        );
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    const dangerousOperations = /\b(DROP|DELETE|TRUNCATE|ALTER|CREATE|GRANT|REVOKE)\b/gi;
    if (dangerousOperations.test(sql)) {
      logger.security('Dangerous SQL operation detected', { sql });
      // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º
    }

    return true;
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è PostgreSQL
  static validatePostgreSQLConnection(config) {
    const required = ['host', 'username', 'password', 'database'];
    
    for (const field of required) {
      if (!config[field]) {
        throw new ValidationError(`–ü–æ–ª–µ ${field} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è`, field, config[field]);
      }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ö–æ—Å—Ç–∞
    if (!VALIDATION_PATTERNS.IP_ADDRESS.test(config.host) && !/^[a-zA-Z0-9.-]+$/.test(config.host)) {
      throw new ValidationError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ö–æ—Å—Ç–∞', 'host', config.host);
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ—Ä—Ç–∞
    if (config.port && (config.port < 1 || config.port > 65535)) {
      throw new ValidationError('–ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 1 –∏ 65535', 'port', config.port);
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
    if (config.password.length < SECURITY_LIMITS.PASSWORD_MIN_LENGTH) {
      throw new ValidationError(
        `–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º ${SECURITY_LIMITS.PASSWORD_MIN_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤`,
        'password',
        '***'
      );
    }

    return true;
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  static validateSSHConnection(config) {
    const required = ['host', 'username', 'password'];
    
    for (const field of required) {
      if (!config[field]) {
        throw new ValidationError(`–ü–æ–ª–µ ${field} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è`, field, config[field]);
      }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ö–æ—Å—Ç–∞
    if (!VALIDATION_PATTERNS.IP_ADDRESS.test(config.host) && !/^[a-zA-Z0-9.-]+$/.test(config.host)) {
      throw new ValidationError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ö–æ—Å—Ç–∞', 'host', config.host);
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ—Ä—Ç–∞
    if (config.port && (config.port < 1 || config.port > 65535)) {
      throw new ValidationError('–ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–∂–¥—É 1 –∏ 65535', 'port', config.port);
    }

    return true;
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è URL –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
  static validateURL(url) {
    if (!url || typeof url !== 'string') {
      throw new ValidationError('URL –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω', 'url', url);
    }

    if (!VALIDATION_PATTERNS.URL.test(url)) {
      throw new ValidationError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL', 'url', url);
    }

    return true;
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—è PostgreSQL
  static validatePostgreSQLAction(action) {
    const validActions = Object.values(ACTIONS.POSTGRESQL);
    if (!validActions.includes(action)) {
      throw new ValidationError(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ PostgreSQL: ${action}`, 'action', action);
    }
    return true;
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—è SSH
  static validateSSHAction(action) {
    const validActions = Object.values(ACTIONS.SSH);
    if (!validActions.includes(action)) {
      throw new ValidationError(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ SSH: ${action}`, 'action', action);
    }
    return true;
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è HTTP –º–µ—Ç–æ–¥–∞
  static validateHTTPMethod(method) {
    const validMethods = ['GET', 'POST', 'PUT', 'DELETE', 'PATCH'];
    if (!validMethods.includes(method.toUpperCase())) {
      throw new ValidationError(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π HTTP –º–µ—Ç–æ–¥: ${method}`, 'method', method);
    }
    return true;
  }

  // –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  static sanitizeInput(input) {
    if (typeof input !== 'string') return input;
    
    return input
      .replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '')
      .replace(/<[^>]*>/g, '')
      .trim();
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –ª–∏–º–∏—Ç–∞ –∑–∞–ø–∏—Å–µ–π
  static validateLimit(limit) {
    if (limit !== undefined && limit !== null) {
      if (!Number.isInteger(limit) || limit < 1 || limit > SECURITY_LIMITS.MAX_QUERY_LIMIT) {
        throw new ValidationError(
          `–õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ ${SECURITY_LIMITS.MAX_QUERY_LIMIT}`,
          'limit',
          limit
        );
      }
    }
    return true;
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
  static validateDataObject(data) {
    if (!data || typeof data !== 'object' || Array.isArray(data)) {
      throw new ValidationError('–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º', 'data', data);
    }

    if (Object.keys(data).length === 0) {
      throw new ValidationError('–û–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º', 'data', data);
    }

    return true;
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è JSON
  static validateJSON(jsonString) {
    try {
      return JSON.parse(jsonString);
    } catch (error) {
      throw new ValidationError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON —Ñ–æ—Ä–º–∞—Ç', 'json', jsonString);
    }
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
  static validateDataSize(data) {
    const dataString = typeof data === 'string' ? data : JSON.stringify(data);
    if (dataString.length > SECURITY_LIMITS.MAX_DATA_SIZE) {
      throw new ValidationError(
        `–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç ${SECURITY_LIMITS.MAX_DATA_SIZE} —Å–∏–º–≤–æ–ª–æ–≤`,
        'data',
        data
      );
    }
    return true;
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ—Ä—Ç–∞
  static validatePort(port) {
    if (!Number.isInteger(port) || port < 1 || port > 65535) {
      throw new ValidationError('–ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 65535', 'port', port);
    }
    return true;
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static validateUsername(username) {
    if (!username || typeof username !== 'string') {
      throw new ValidationError('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ', 'username', username);
    }

    if (!VALIDATION_PATTERNS.USERNAME.test(username)) {
      throw new ValidationError('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'username', username);
    }

    return true;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ command injection
  static checkCommandInjection(command, fieldName) {
    if (typeof command !== 'string') return true;

    const dangerousPatterns = [
      /[;&|`$()]/g,           // –û–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
      /\s+(rm|cat|wget|curl|nc|telnet|ssh)\s+/gi,  // –û–ø–∞—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
      /\|\s*mail/gi           // Pipe –≤ mail
    ];

    for (const pattern of dangerousPatterns) {
      if (pattern.test(command)) {
        logger.security('Command injection attempt detected', { field: fieldName, value: command });
        throw new ValidationError(
          `–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è command injection –≤ –ø–æ–ª–µ ${fieldName}`,
          fieldName,
          command
        );
      }
    }
    return true;
  }
}

module.exports = { Validator, ValidationError }; 