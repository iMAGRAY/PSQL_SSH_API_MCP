// üåê API –ú–û–î–£–õ–¨
// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –∑–∞—â–∏—Ç–æ–π

import { TIMEOUTS, ACTIONS, AI_HINTS } from '../constants/index.js';
import { Validator } from '../validation/index.js';
import { ErrorHandler } from '../errors/index.js';
import logger from '../logger/index.js';

class APIManager {
  constructor() {
    this.fetch = null;
    this.loadDependencies();
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  loadDependencies() {
    try {
      this.fetch = require('node-fetch');
      logger.info('API dependencies loaded');
    } catch (error) {
      logger.error('API dependencies not found', { error: error.message });
      throw new Error('API –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: npm install node-fetch');
    }
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è HTTP –º–µ—Ç–æ–¥–∞
  validateMethod(method) {
    if (!method || typeof method !== 'string') {
      throw new Error('HTTP –º–µ—Ç–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    }
    
    Validator.validateHTTPMethod(method.toUpperCase());
    return method.toUpperCase();
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
  validateHeaders(headers = {}) {
    if (typeof headers !== 'object') {
      throw new Error('–ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º');
    }

    const sanitizedHeaders = {};
    
    for (const [key, value] of Object.entries(headers)) {
      // –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –∫–ª—é—á–µ–π –∏ –∑–Ω–∞—á–µ–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
      const sanitizedKey = Validator.sanitizeInput(key);
      const sanitizedValue = Validator.sanitizeInput(String(value));
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–ø–∞—Å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
      const dangerousHeaders = [
        'x-forwarded-for',
        'x-real-ip',
        'x-original-url',
        'x-rewrite-url',
        'host'
      ];
      
      if (dangerousHeaders.includes(sanitizedKey.toLowerCase())) {
        logger.security('Dangerous header detected', { key: sanitizedKey, value: sanitizedValue });
        continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–ø–∞—Å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
      }
      
      sanitizedHeaders[sanitizedKey] = sanitizedValue;
    }

    return sanitizedHeaders;
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
  validateRequestData(data) {
    if (!data) return null;
    
    if (typeof data !== 'object') {
      throw new Error('–î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
    const dataSize = JSON.stringify(data).length;
    if (dataSize > 1024 * 1024) { // 1MB
      throw new Error('–î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ (–º–∞–∫—Å–∏–º—É–º 1MB)');
    }

    return data;
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è URL
  validateRequestURL(url) {
    if (!url || typeof url !== 'string') {
      throw new Error('URL –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ URL
    Validator.validateURL(url);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–ø–∞—Å–Ω—ã–µ —Å—Ö–µ–º—ã
    const dangerousSchemes = ['file:', 'ftp:', 'data:', 'javascript:'];
    for (const scheme of dangerousSchemes) {
      if (url.toLowerCase().startsWith(scheme)) {
        logger.security('Dangerous URL scheme detected', { url });
        throw new Error(`–°—Ö–µ–º–∞ URL ${scheme} –∑–∞–ø—Ä–µ—â–µ–Ω–∞`);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –≤ production
    if (process.env.NODE_ENV === 'production') {
      const localPatterns = [
        /^https?:\/\/localhost/i,
        /^https?:\/\/127\./i,
        /^https?:\/\/192\.168\./i,
        /^https?:\/\/10\./i,
        /^https?:\/\/172\.(1[6-9]|2\d|3[01])\./i
      ];

      for (const pattern of localPatterns) {
        if (pattern.test(url)) {
          logger.security('Local URL access attempted in production', { url });
          throw new Error('–î–æ—Å—Ç—É–ø –∫ –ª–æ–∫–∞–ª—å–Ω—ã–º –∞–¥—Ä–µ—Å–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω –≤ production');
        }
      }
    }

    return url;
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞
  async makeRequest(args) {
    const { method, url, headers = {}, data, auth_token } = args;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const validMethod = this.validateMethod(method);
    const validURL = this.validateRequestURL(url);
    const validHeaders = this.validateHeaders(headers);
    const validData = this.validateRequestData(data);

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const requestHeaders = {
      'User-Agent': 'PostgreSQL-API-SSH-MCP-Server/2.0.0',
      'Accept': 'application/json',
      'Accept-Encoding': 'gzip, deflate',
      'Cache-Control': 'no-cache',
      ...validHeaders
    };

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (auth_token) {
      if (typeof auth_token !== 'string') {
        throw new Error('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π');
      }
      requestHeaders['Authorization'] = `Bearer ${auth_token}`;
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    const fetchOptions = {
      method: validMethod,
      headers: requestHeaders,
      timeout: TIMEOUTS.API_REQUEST,
      follow: 5, // –ú–∞–∫—Å–∏–º—É–º 5 —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
      size: 1024 * 1024, // –ú–∞–∫—Å–∏–º—É–º 1MB –æ—Ç–≤–µ—Ç–∞
      compress: true
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–µ—Ç–æ–¥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç
    if (validData && ['POST', 'PUT', 'PATCH'].includes(validMethod)) {
      if (!requestHeaders['Content-Type']) {
        requestHeaders['Content-Type'] = 'application/json';
      }
      fetchOptions.body = JSON.stringify(validData);
    }

    const startTime = Date.now();
    
    try {
      logger.info('API request started', { 
        method: validMethod, 
        url: validURL,
        hasAuth: !!auth_token 
      });

      const response = await this.fetch(validURL, fetchOptions);
      const duration = Date.now() - startTime;

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
      let responseData;
      const contentType = response.headers.get('content-type');
      
      try {
        if (contentType && contentType.includes('application/json')) {
          responseData = await response.json();
        } else {
          responseData = await response.text();
        }
      } catch (parseError) {
        logger.warn('Response parsing failed', { 
          error: parseError.message,
          contentType 
        });
        responseData = `–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${parseError.message}`;
      }

      const result = {
        success: response.ok,
        status: response.status,
        statusText: response.statusText,
        headers: Object.fromEntries(response.headers.entries()),
        data: responseData,
        url: validURL,
        method: validMethod,
        duration: `${duration}ms`,
        ai_hint: response.ok ? AI_HINTS.QUERY_SUCCESS : `HTTP –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: ${response.status}`
      };

      logger.info('API request completed', { 
        method: validMethod, 
        url: validURL,
        status: response.status,
        duration,
        success: response.ok
      });

      return result;

    } catch (error) {
      const duration = Date.now() - startTime;
      
      logger.error('API request failed', { 
        method: validMethod, 
        url: validURL,
        error: error.message,
        duration
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
      let errorMessage = error.message;
      let aiHint = '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–∞';

      if (error.code === 'ENOTFOUND') {
        errorMessage = '–ù–µ —É–¥–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ö–æ—Å—Ç';
        aiHint = '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å URL';
      } else if (error.code === 'ECONNREFUSED') {
        errorMessage = '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ';
        aiHint = '–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç';
      } else if (error.code === 'ETIMEDOUT') {
        errorMessage = '–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞';
        aiHint = '–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏';
      } else if (error.name === 'AbortError') {
        errorMessage = '–ó–∞–ø—Ä–æ—Å –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω';
        aiHint = '–ó–∞–ø—Ä–æ—Å –ø—Ä–µ–≤—ã—Å–∏–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç';
      }

      return {
        success: false,
        status: 0,
        error: errorMessage,
        url: validURL,
        method: validMethod,
        duration: `${duration}ms`,
        ai_hint: aiHint
      };
    }
  }

  // –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
  async get(args) {
    return this.makeRequest({ ...args, method: 'GET' });
  }

  async post(args) {
    return this.makeRequest({ ...args, method: 'POST' });
  }

  async put(args) {
    return this.makeRequest({ ...args, method: 'PUT' });
  }

  async delete(args) {
    return this.makeRequest({ ...args, method: 'DELETE' });
  }

  async patch(args) {
    return this.makeRequest({ ...args, method: 'PATCH' });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
  async checkAPI(args) {
    const { url } = args;
    
    try {
      const result = await this.makeRequest({
        method: 'HEAD',
        url: url,
        headers: { 'User-Agent': 'MCP-Health-Check' }
      });

      return {
        url,
        accessible: result.success,
        status: result.status,
        response_time: result.duration,
        ai_hint: result.success ? 'API –¥–æ—Å—Ç—É–ø–µ–Ω' : 'API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
      };
    } catch (error) {
      return {
        url,
        accessible: false,
        error: error.message,
        ai_hint: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API'
      };
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
  async handleAction(args) {
    const { method, ...actionArgs } = args;
    
    const context = {
      operation: 'api',
      method: method,
      url: actionArgs.url
    };

    try {
      // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≤—Å–µ—Ö HTTP –º–µ—Ç–æ–¥–æ–≤
      return await this.makeRequest(args);
    } catch (error) {
      throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ ErrorHandler
    }
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
const apiManager = new APIManager();

export default apiManager; 