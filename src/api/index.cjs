// üåê API –ú–û–î–£–õ–¨
// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –∑–∞—â–∏—Ç–æ–π

const { TIMEOUTS, ACTIONS, AI_HINTS } = require('../constants/index.cjs');
const logger = require('../logger/index.cjs');

class APIManager {
  constructor() {
    this.fetch = null;
    this.loadDependencies();
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  loadDependencies() {
    try {
      this.fetch = require('node-fetch');
      logger.info('API dependencies loaded');
    } catch (error) {
      logger.error('API dependencies not found', { error: error.message });
      throw new Error('API –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: npm install node-fetch');
    }
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è HTTP –º–µ—Ç–æ–¥–∞
  validateMethod(method) {
    if (!method || typeof method !== 'string') {
      throw new Error('HTTP –º–µ—Ç–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    }
    
    const validMethods = ['GET', 'POST', 'PUT', 'DELETE', 'PATCH'];
    const upperMethod = method.toUpperCase();
    
    if (!validMethods.includes(upperMethod)) {
      throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π HTTP –º–µ—Ç–æ–¥: ${method}`);
    }
    
    return upperMethod;
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
  validateHeaders(headers = {}) {
    if (typeof headers !== 'object') {
      throw new Error('–ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º');
    }

    const sanitizedHeaders = {};
    
    for (const [key, value] of Object.entries(headers)) {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–ø–∞—Å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
      const dangerousHeaders = [
        'x-forwarded-for',
        'x-real-ip',
        'x-original-url',
        'x-rewrite-url',
        'host'
      ];
      
      if (dangerousHeaders.includes(key.toLowerCase())) {
        logger.security('Dangerous header detected', { key, value });
        continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–ø–∞—Å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
      }
      
      sanitizedHeaders[key] = String(value);
    }

    return sanitizedHeaders;
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
  validateRequestData(data) {
    if (!data) return null;
    
    if (typeof data !== 'object') {
      throw new Error('–î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
    const dataSize = JSON.stringify(data).length;
    if (dataSize > 1024 * 1024) { // 1MB
      throw new Error('–î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ (–º–∞–∫—Å–∏–º—É–º 1MB)');
    }

    return data;
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è URL
  validateRequestURL(url) {
    if (!url || typeof url !== 'string') {
      throw new Error('URL –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–ø–∞—Å–Ω—ã–µ —Å—Ö–µ–º—ã
    const dangerousSchemes = ['file:', 'ftp:', 'data:', 'javascript:'];
    for (const scheme of dangerousSchemes) {
      if (url.toLowerCase().startsWith(scheme)) {
        logger.security('Dangerous URL scheme detected', { url });
        throw new Error(`–°—Ö–µ–º–∞ URL ${scheme} –∑–∞–ø—Ä–µ—â–µ–Ω–∞`);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –≤ production
    if (process.env.NODE_ENV === 'production') {
      const localPatterns = [
        /^https?:\/\/localhost/i,
        /^https?:\/\/127\./i,
        /^https?:\/\/192\.168\./i,
        /^https?:\/\/10\./i,
        /^https?:\/\/172\.(1[6-9]|2\d|3[01])\./i
      ];

      for (const pattern of localPatterns) {
        if (pattern.test(url)) {
          logger.security('Local URL access attempted in production', { url });
          throw new Error('–î–æ—Å—Ç—É–ø –∫ –ª–æ–∫–∞–ª—å–Ω—ã–º –∞–¥—Ä–µ—Å–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω –≤ production');
        }
      }
    }

    return url;
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞
  async makeRequest(args) {
    const { method, url, headers = {}, data, auth_token } = args;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const validMethod = this.validateMethod(method);
    const validURL = this.validateRequestURL(url);
    const validHeaders = this.validateHeaders(headers);
    const validData = this.validateRequestData(data);

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const requestHeaders = {
      'User-Agent': 'PostgreSQL-API-SSH-MCP-Server/3.0.0',
      'Accept': 'application/json',
      'Accept-Encoding': 'gzip, deflate',
      'Cache-Control': 'no-cache',
      ...validHeaders
    };

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (auth_token) {
      if (typeof auth_token !== 'string') {
        throw new Error('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π');
      }
      requestHeaders['Authorization'] = `Bearer ${auth_token}`;
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    const fetchOptions = {
      method: validMethod,
      headers: requestHeaders,
      timeout: TIMEOUTS.API_REQUEST,
      follow: 5, // –ú–∞–∫—Å–∏–º—É–º 5 —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
      size: 1024 * 1024, // –ú–∞–∫—Å–∏–º—É–º 1MB –æ—Ç–≤–µ—Ç–∞
      compress: true
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–µ—Ç–æ–¥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç
    if (validData && ['POST', 'PUT', 'PATCH'].includes(validMethod)) {
      if (!requestHeaders['Content-Type']) {
        requestHeaders['Content-Type'] = 'application/json';
      }
      fetchOptions.body = JSON.stringify(validData);
    }

    const startTime = Date.now();
    
    try {
      logger.info('API request started', { 
        method: validMethod, 
        url: validURL,
        hasAuth: !!auth_token 
      });

      const response = await this.fetch(validURL, fetchOptions);
      const duration = Date.now() - startTime;

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
      let responseData;
      const contentType = response.headers.get('content-type');
      
      try {
        if (contentType && contentType.includes('application/json')) {
          responseData = await response.json();
        } else {
          responseData = await response.text();
        }
      } catch (parseError) {
        logger.warn('Response parsing failed', { 
          error: parseError.message,
          contentType 
        });
        responseData = `–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${parseError.message}`;
      }

      const result = {
        status: response.ok ? 'success' : 'error',
        http_status: response.status,
        url: validURL,
        method: validMethod,
        data: responseData,
        duration: `${duration}ms`,
        ai_hint: response.ok ? AI_HINTS.QUERY_SUCCESS : `HTTP –æ—à–∏–±–∫–∞: ${response.status}`
      };

      logger.info('API request completed', { 
        method: validMethod, 
        url: validURL,
        status: response.status,
        duration 
      });

      return result;
    } catch (error) {
      const duration = Date.now() - startTime;
      logger.error('API request failed', { 
        method: validMethod, 
        url: validURL,
        error: error.message,
        duration 
      });
      throw error;
    }
  }

  // GET –∑–∞–ø—Ä–æ—Å
  async get(args) {
    return await this.makeRequest({ ...args, method: 'GET' });
  }

  // POST –∑–∞–ø—Ä–æ—Å
  async post(args) {
    return await this.makeRequest({ ...args, method: 'POST' });
  }

  // PUT –∑–∞–ø—Ä–æ—Å
  async put(args) {
    return await this.makeRequest({ ...args, method: 'PUT' });
  }

  // DELETE –∑–∞–ø—Ä–æ—Å
  async delete(args) {
    return await this.makeRequest({ ...args, method: 'DELETE' });
  }

  // PATCH –∑–∞–ø—Ä–æ—Å
  async patch(args) {
    return await this.makeRequest({ ...args, method: 'PATCH' });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
  async checkAPI(args) {
    const { url } = args;
    
    try {
      const result = await this.makeRequest({ 
        method: 'GET', 
        url,
        timeout: 5000 
      });
      
      return {
        url,
        status: 'available',
        response_time: result.duration,
        ai_hint: 'API –¥–æ—Å—Ç—É–ø–µ–Ω'
      };
    } catch (error) {
      return {
        url,
        status: 'unavailable',
        error: error.message,
        ai_hint: 'API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
      };
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
  async handleAction(args) {
    const { action } = args;
    
    switch (action) {
      case ACTIONS.API.GET:
        return await this.get(args);
      case ACTIONS.API.POST:
        return await this.post(args);
      case ACTIONS.API.PUT:
        return await this.put(args);
      case ACTIONS.API.DELETE:
        return await this.delete(args);
      case ACTIONS.API.PATCH:
        return await this.patch(args);
      case ACTIONS.API.CHECK_API:
        return await this.checkAPI(args);
      default:
        throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ API: ${action}`);
    }
  }
}

module.exports = APIManager; 