// üîê SSH –ú–û–î–£–õ–¨
// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ SSH –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç command injection

const { TIMEOUTS, DEFAULTS, ACTIONS, AI_HINTS } = require('../constants/index.cjs');
const Constants = require('../constants/Constants.cjs');
const securityManager = require('../security/index.cjs');
const logger = require('../logger/index.cjs');

class SSHManager {
  constructor() {
    this.Client = null;
    this.loadDependencies();
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  loadDependencies() {
    try {
      const { Client } = require('ssh2');
      this.Client = Client;
      logger.info('SSH dependencies loaded');
    } catch (error) {
      logger.error('SSH dependencies not found', { error: error.message });
      throw new Error('SSH –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: npm install ssh2');
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  createConnection(config) {
    if (!this.Client) {
      throw new Error('SSH –∫–ª–∏–µ–Ω—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
    }

    return new this.Client();
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  async setupProfile(args) {
    const { profile_name = 'default', host, port, username, password } = args;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!host || !username || !password) {
      throw new Error('host, username –∏ password –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
    }

    const config = {
      host,
      port: port || DEFAULTS.SSH_PORT,
      username,
      password
    };

    // –ü—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    securityManager.validatePassword(password);
    securityManager.validateHost(host);

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const conn = this.createConnection(config);
    
    try {
      await new Promise((resolve, reject) => {
        const timeout = setTimeout(() => {
          conn.end();
          reject(new Error('–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'));
        }, TIMEOUTS.TEST_CONNECTION);

        conn.on('ready', () => {
          clearTimeout(timeout);
          conn.end();
          resolve();
        });

        conn.on('error', (error) => {
          clearTimeout(timeout);
          reject(error);
        });

        conn.connect(config);
      });

      logger.connection('ssh', 'test-success', { host, username });
    } catch (error) {
      logger.connection('ssh', 'test-failed', { host, username, error: error.message });
      throw error;
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    securityManager.saveProfile('ssh', profile_name, config);

    return {
      message: `–ü—Ä–æ—Ñ–∏–ª—å SSH '${profile_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω`,
      profile_name,
      host: config.host,
      port: config.port,
      ai_hint: AI_HINTS.SETUP_COMPLETE
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π
  async listProfiles() {
    const profiles = securityManager.getProfilesByType('ssh');
    
    return {
      profiles: profiles.map(p => ({
        name: p.name,
        host: p.host,
        port: p.port,
        created_at: p.created_at,
        last_used: p.last_used
      })),
      count: profiles.length,
      ai_hint: "–°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π SSH"
    };
  }

  // –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è injection
  sanitizeCommand(command) {
    if (!command || typeof command !== 'string') {
      throw new Error('–ö–æ–º–∞–Ω–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –∫–æ–º–∞–Ω–¥—ã
    const dangerousPatterns = [
      /[;&|`$()]/g,           // –û–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
      /\|\s*rm\s+/gi,         // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
      /\|\s*dd\s+/gi,         // –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å –¥–∏—Å–∫–æ–≤
      /\|\s*shutdown\s+/gi,   // –í—ã–∫–ª—é—á–µ–Ω–∏–µ
      /\|\s*reboot\s+/gi,     // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
      /sudo\s+/gi,            // Sudo –∫–æ–º–∞–Ω–¥—ã
      /su\s+/gi,              // –°–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      /chmod\s+[0-9]{3,4}/gi, // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤
      /crontab\s+/gi,         // –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
      /systemctl\s+/gi,       // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞–º–∏
      /service\s+/gi,         // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞–º–∏
      /iptables\s+/gi,        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–µ—Ä–≤–æ–ª–∞
      /mount\s+/gi,           // –ú–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      /umount\s+/gi           // –†–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    ];

    for (const pattern of dangerousPatterns) {
      if (pattern.test(command)) {
        logger.security('Dangerous SSH command detected', { command });
        throw new Error('–ö–æ–º–∞–Ω–¥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏');
      }
    }

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∫–æ–º–∞–Ω–¥—ã
    if (command.length > Constants.LIMITS.MAX_SQL_COMMAND_LENGTH) {
      throw new Error(`–ö–æ–º–∞–Ω–¥–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è (–º–∞–∫—Å–∏–º—É–º ${Constants.LIMITS.MAX_SQL_COMMAND_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤)`);
    }

    return command.trim();
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
  async execute(args) {
    const { command, profile_name = 'default' } = args;
    
    // –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã
    const sanitizedCommand = this.sanitizeCommand(command);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    const profile = securityManager.getProfile('ssh', profile_name);
    if (!profile) {
      throw new Error(`–ü—Ä–æ—Ñ–∏–ª—å '${profile_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    const conn = this.createConnection(profile.config);
    
    try {
      const result = await new Promise((resolve, reject) => {
        const timeout = setTimeout(() => {
          conn.end();
          reject(new Error('–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã'));
        }, TIMEOUTS.SSH_CONNECT);

        conn.on('ready', () => {
          clearTimeout(timeout);
          logger.connection('ssh', 'connected', { profile: profile_name });
          
          conn.exec(sanitizedCommand, (err, stream) => {
            if (err) {
              conn.end();
              reject(err);
              return;
            }
            
            let stdout = '';
            let stderr = '';
            
            stream
              .on('close', (code, signal) => {
                conn.end();
                resolve({
                  command: sanitizedCommand,
                  output: stdout,
                  error: stderr,
                  exit_code: code,
                  success: code === 0,
                  ai_hint: code === 0 ? "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ" : "–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π"
                });
              })
              .on('data', (data) => {
                stdout += data.toString();
              })
              .stderr.on('data', (data) => {
                stderr += data.toString();
              });
          });
        });

        conn.on('error', (error) => {
          clearTimeout(timeout);
          reject(error);
        });

        conn.connect(profile.config);
      });

      return result;
    } catch (error) {
      logger.error('SSH command execution failed', { command: sanitizedCommand, error: error.message });
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ
  async systemInfo(args) {
    const { profile_name = 'default' } = args;
    
    const commands = [
      'uname -a',
      'uptime',
      'df -h',
      'free -h',
      'ps aux | head -10'
    ];

    const profile = securityManager.getProfile('ssh', profile_name);
    if (!profile) {
      throw new Error(`–ü—Ä–æ—Ñ–∏–ª—å '${profile_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    const conn = this.createConnection(profile.config);
    
    try {
      const systemInfo = await new Promise((resolve, reject) => {
        const timeout = setTimeout(() => {
          conn.end();
          reject(new Error('–¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ'));
        }, TIMEOUTS.SSH_CONNECT);

        conn.on('ready', async () => {
          clearTimeout(timeout);
          const results = {};
          
          for (const cmd of commands) {
            try {
              const cmdResult = await new Promise((cmdResolve, cmdReject) => {
                conn.exec(cmd, (err, stream) => {
                  if (err) {
                    cmdReject(err);
                    return;
                  }
                  
                  let output = '';
                  stream.on('data', (data) => {
                    output += data.toString();
                  });
                  
                  stream.on('close', () => {
                    cmdResolve(output.trim());
                  });
                });
              });
              results[cmd] = cmdResult;
            } catch (error) {
              results[cmd] = `–û—à–∏–±–∫–∞: ${error.message}`;
            }
          }
          
          conn.end();
          resolve(results);
        });
        
        conn.on('error', (error) => {
          clearTimeout(timeout);
          reject(error);
        });
        
        conn.connect(profile.config);
      });
      
      return {
        system_info: systemInfo,
        ai_hint: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ –ø–æ–ª—É—á–µ–Ω–∞"
      };
    } catch (error) {
      logger.error('SSH system info failed', { error: error.message });
      throw error;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ö–æ—Å—Ç–∞
  async checkHost(args) {
    const { profile_name = 'default' } = args;
    
    const profile = securityManager.getProfile('ssh', profile_name);
    if (!profile) {
      throw new Error(`–ü—Ä–æ—Ñ–∏–ª—å '${profile_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    const conn = this.createConnection(profile.config);
    
    try {
      const result = await new Promise((resolve, reject) => {
        const timeout = setTimeout(() => {
          conn.end();
          reject(new Error('–¢–∞–π–º–∞—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö–æ—Å—Ç–∞'));
        }, TIMEOUTS.TEST_CONNECTION);

        conn.on('ready', () => {
          clearTimeout(timeout);
          conn.end();
          resolve({
            host: profile.config.host,
            port: profile.config.port,
            status: 'available',
            ai_hint: '–•–æ—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'
          });
        });

        conn.on('error', (error) => {
          clearTimeout(timeout);
          reject(error);
        });

        conn.connect(profile.config);
      });

      return result;
    } catch (error) {
      return {
        host: profile.config.host,
        port: profile.config.port,
        status: 'unavailable',
        error: error.message,
        ai_hint: '–•–æ—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
      };
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
  async handleAction(args) {
    const { action } = args;
    
    switch (action) {
      case ACTIONS.SSH.SETUP_PROFILE:
        return await this.setupProfile(args);
      case ACTIONS.SSH.LIST_PROFILES:
        return await this.listProfiles(args);
      case ACTIONS.SSH.EXECUTE:
        return await this.execute(args);
      case ACTIONS.SSH.SYSTEM_INFO:
        return await this.systemInfo(args);
      case ACTIONS.SSH.CHECK_HOST:
        return await this.checkHost(args);
      default:
        throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ SSH: ${action}`);
    }
  }
}

module.exports = SSHManager; 