// üêò POSTGRESQL –ú–û–î–£–õ–¨
// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç SQL injection

import { TIMEOUTS, DEFAULTS, ACTIONS, AI_HINTS } from '../constants/index.js';
import { Validator } from '../validation/index.js';
import { ErrorHandler } from '../errors/index.js';
import securityManager from '../security/index.js';
import logger from '../logger/index.js';

class PostgreSQLManager {
  constructor() {
    this.Client = null;
    this.loadDependencies();
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  loadDependencies() {
    try {
      const { Client } = require('pg');
      this.Client = Client;
      logger.info('PostgreSQL dependencies loaded');
    } catch (error) {
      logger.error('PostgreSQL dependencies not found', { error: error.message });
      throw new Error('PostgreSQL –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: npm install pg');
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  async createConnection(config) {
    if (!this.Client) {
      throw new Error('PostgreSQL –∫–ª–∏–µ–Ω—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    Validator.validatePostgreSQLConnection(config);

    const client = new this.Client({
      host: config.host,
      port: config.port || DEFAULTS.POSTGRESQL_PORT,
      database: config.database,
      user: config.username,
      password: config.password,
      connectionTimeoutMillis: TIMEOUTS.CONNECTION,
      query_timeout: TIMEOUTS.QUERY,
      ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
    });

    return client;
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  async setupProfile(args) {
    const { profile_name = 'default', host, port, username, password, database } = args;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const config = {
      host: Validator.sanitizeInput(host),
      port: port || DEFAULTS.POSTGRESQL_PORT,
      database: Validator.sanitizeInput(database),
      username: Validator.sanitizeInput(username),
      password: password
    };

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    securityManager.validatePassword(password);
    securityManager.validateHost(host);

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const client = await this.createConnection(config);
    
    try {
      await client.connect();
      await client.query('SELECT NOW()');
      await client.end();
      
      logger.connection('postgresql', 'test-success', { host, database, username });
    } catch (error) {
      logger.connection('postgresql', 'test-failed', { host, database, username, error: error.message });
      throw error;
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    securityManager.saveProfile('postgresql', profile_name, config);

    return {
      message: `–ü—Ä–æ—Ñ–∏–ª—å PostgreSQL '${profile_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω`,
      profile_name,
      host: config.host,
      database: config.database,
      ai_hint: AI_HINTS.SETUP_COMPLETE
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π
  async listProfiles() {
    const profiles = securityManager.getProfilesByType('postgresql');
    
    return {
      profiles: profiles.map(p => ({
        name: p.name,
        host: p.host,
        port: p.port,
        created_at: p.createdAt,
        last_used: p.lastUsed
      })),
      count: profiles.length,
      ai_hint: "–°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π PostgreSQL"
    };
  }

  // –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—Ä–æ—Å (–æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
  async quickQuery(args) {
    const { sql, profile_name = 'default' } = args;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è SQL
    Validator.validateSQL(sql);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    const profile = securityManager.getProfile('postgresql', profile_name);
    if (!profile) {
      throw new Error(`–ü—Ä–æ—Ñ–∏–ª—å '${profile_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    const client = await this.createConnection(profile.config);
    
    try {
      await client.connect();
      logger.connection('postgresql', 'connected', { profile: profile_name });
      
      const startTime = Date.now();
      const result = await client.query(sql);
      const duration = Date.now() - startTime;
      
      logger.query(sql, duration, { profile: profile_name, rows: result.rowCount });
      
      return {
        rows: result.rows,
        count: result.rowCount,
        query: sql,
        duration: `${duration}ms`,
        ai_hint: AI_HINTS.QUERY_SUCCESS
      };
    } finally {
      await client.end();
      logger.connection('postgresql', 'disconnected', { profile: profile_name });
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã
  async showTables(args) {
    const { profile_name = 'default' } = args;
    
    const profile = securityManager.getProfile('postgresql', profile_name);
    if (!profile) {
      throw new Error(`–ü—Ä–æ—Ñ–∏–ª—å '${profile_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    const client = await this.createConnection(profile.config);
    
    try {
      await client.connect();
      
      const result = await client.query(`
        SELECT 
          tablename,
          tableowner,
          hasindexes,
          hasrules,
          hastriggers
        FROM pg_tables 
        WHERE schemaname = 'public'
        ORDER BY tablename
      `);
      
      return {
        tables: result.rows,
        count: result.rowCount,
        ai_hint: "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
      };
    } finally {
      await client.end();
    }
  }

  // –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã
  async describeTable(args) {
    const { table_name, profile_name = 'default' } = args;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ç–∞–±–ª–∏—Ü—ã
    Validator.validateTableName(table_name);
    
    const profile = securityManager.getProfile('postgresql', profile_name);
    if (!profile) {
      throw new Error(`–ü—Ä–æ—Ñ–∏–ª—å '${profile_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    const client = await this.createConnection(profile.config);
    
    try {
      await client.connect();
      
      const result = await client.query(`
        SELECT 
          column_name,
          data_type,
          is_nullable,
          column_default,
          character_maximum_length
        FROM information_schema.columns 
        WHERE table_name = $1 AND table_schema = 'public'
        ORDER BY ordinal_position
      `, [table_name]);
      
      return {
        table_name,
        columns: result.rows,
        count: result.rowCount,
        ai_hint: `–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã ${table_name}`
      };
    } finally {
      await client.end();
    }
  }

  // –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
  async sampleData(args) {
    const { table_name, limit = DEFAULTS.SAMPLE_DATA_LIMIT, profile_name = 'default' } = args;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    Validator.validateTableName(table_name);
    Validator.validateLimit(limit);
    
    const profile = securityManager.getProfile('postgresql', profile_name);
    if (!profile) {
      throw new Error(`–ü—Ä–æ—Ñ–∏–ª—å '${profile_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    const client = await this.createConnection(profile.config);
    
    try {
      await client.connect();
      
      const result = await client.query(`SELECT * FROM ${table_name} LIMIT $1`, [limit]);
      
      return {
        table_name,
        sample_data: result.rows,
        count: result.rowCount,
        limit,
        ai_hint: `–ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã ${table_name}`
      };
    } finally {
      await client.end();
    }
  }

  // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  async insertData(args) {
    const { table_name, data, profile_name = 'default' } = args;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    Validator.validateTableName(table_name);
    Validator.validateDataObject(data);
    
    const profile = securityManager.getProfile('postgresql', profile_name);
    if (!profile) {
      throw new Error(`–ü—Ä–æ—Ñ–∏–ª—å '${profile_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    const client = await this.createConnection(profile.config);
    
    try {
      await client.connect();
      
      const columns = Object.keys(data);
      const values = Object.values(data);
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω –∫–æ–ª–æ–Ω–æ–∫
      columns.forEach(col => Validator.validateColumnName(col));
      
      const placeholders = values.map((_, i) => `$${i + 1}`).join(', ');
      const columnNames = columns.join(', ');
      
      const sql = `INSERT INTO ${table_name} (${columnNames}) VALUES (${placeholders}) RETURNING *`;
      const result = await client.query(sql, values);
      
      logger.query(sql, 0, { profile: profile_name, table: table_name, action: 'insert' });
      
      return {
        table_name,
        inserted_data: result.rows[0],
        ai_hint: `–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É ${table_name}`
      };
    } finally {
      await client.end();
    }
  }

  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  async updateData(args) {
    const { table_name, data, where, profile_name = 'default' } = args;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    Validator.validateTableName(table_name);
    Validator.validateDataObject(data);
    
    if (!where || typeof where !== 'string') {
      throw new Error('WHERE —É—Å–ª–æ–≤–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ WHERE —É—Å–ª–æ–≤–∏—è –Ω–∞ SQL injection
    Validator.checkSQLInjection(where, 'where');
    
    const profile = securityManager.getProfile('postgresql', profile_name);
    if (!profile) {
      throw new Error(`–ü—Ä–æ—Ñ–∏–ª—å '${profile_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    const client = await this.createConnection(profile.config);
    
    try {
      await client.connect();
      
      const columns = Object.keys(data);
      const values = Object.values(data);
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω –∫–æ–ª–æ–Ω–æ–∫
      columns.forEach(col => Validator.validateColumnName(col));
      
      const setClause = columns.map((col, i) => `${col} = $${i + 1}`).join(', ');
      const sql = `UPDATE ${table_name} SET ${setClause} WHERE ${where}`;
      
      const result = await client.query(sql, values);
      
      logger.query(sql, 0, { profile: profile_name, table: table_name, action: 'update' });
      
      return {
        table_name,
        updated_rows: result.rowCount,
        ai_hint: `–û–±–Ω–æ–≤–ª–µ–Ω–æ ${result.rowCount} –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ ${table_name}`
      };
    } finally {
      await client.end();
    }
  }

  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  async deleteData(args) {
    const { table_name, where, profile_name = 'default' } = args;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    Validator.validateTableName(table_name);
    
    if (!where || typeof where !== 'string') {
      throw new Error('WHERE —É—Å–ª–æ–≤–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ WHERE —É—Å–ª–æ–≤–∏—è –Ω–∞ SQL injection
    Validator.checkSQLInjection(where, 'where');
    
    const profile = securityManager.getProfile('postgresql', profile_name);
    if (!profile) {
      throw new Error(`–ü—Ä–æ—Ñ–∏–ª—å '${profile_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    const client = await this.createConnection(profile.config);
    
    try {
      await client.connect();
      
      const sql = `DELETE FROM ${table_name} WHERE ${where}`;
      const result = await client.query(sql);
      
      logger.query(sql, 0, { profile: profile_name, table: table_name, action: 'delete' });
      
      return {
        table_name,
        deleted_rows: result.rowCount,
        ai_hint: `–£–¥–∞–ª–µ–Ω–æ ${result.rowCount} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã ${table_name}`
      };
    } finally {
      await client.end();
    }
  }

  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  async databaseInfo(args) {
    const { profile_name = 'default' } = args;
    
    const profile = securityManager.getProfile('postgresql', profile_name);
    if (!profile) {
      throw new Error(`–ü—Ä–æ—Ñ–∏–ª—å '${profile_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    const client = await this.createConnection(profile.config);
    
    try {
      await client.connect();
      
      const result = await client.query(`
        SELECT 
          current_database() as database_name,
          current_user as current_user,
          version() as version,
          (SELECT count(*) FROM information_schema.tables WHERE table_schema = 'public') as table_count
      `);
      
      return {
        database_info: result.rows[0],
        ai_hint: "–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
      };
    } finally {
      await client.end();
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
  async handleAction(args) {
    const { action, ...actionArgs } = args;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—è
    Validator.validatePostgreSQLAction(action);
    
    const context = {
      operation: 'postgresql',
      action,
      profile_name: actionArgs.profile_name,
      table_name: actionArgs.table_name,
      sql: actionArgs.sql
    };

    try {
      switch (action) {
        case ACTIONS.POSTGRESQL.SETUP_PROFILE:
          return await this.setupProfile(actionArgs);
        
        case ACTIONS.POSTGRESQL.LIST_PROFILES:
          return await this.listProfiles(actionArgs);
        
        case ACTIONS.POSTGRESQL.QUICK_QUERY:
          return await this.quickQuery(actionArgs);
        
        case ACTIONS.POSTGRESQL.SHOW_TABLES:
          return await this.showTables(actionArgs);
        
        case ACTIONS.POSTGRESQL.DESCRIBE_TABLE:
          return await this.describeTable(actionArgs);
        
        case ACTIONS.POSTGRESQL.SAMPLE_DATA:
          return await this.sampleData(actionArgs);
        
        case ACTIONS.POSTGRESQL.INSERT_DATA:
          return await this.insertData(actionArgs);
        
        case ACTIONS.POSTGRESQL.UPDATE_DATA:
          return await this.updateData(actionArgs);
        
        case ACTIONS.POSTGRESQL.DELETE_DATA:
          return await this.deleteData(actionArgs);
        
        case ACTIONS.POSTGRESQL.DATABASE_INFO:
          return await this.databaseInfo(actionArgs);
        
        default:
          throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${action}`);
      }
    } catch (error) {
      throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ ErrorHandler
    }
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
const postgresqlManager = new PostgreSQLManager();

export default postgresqlManager; 