// üîê SSH MANAGER
// –¢–æ–Ω–∫–∏–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è SSH –æ–ø–µ—Ä–∞—Ü–∏–π

const { ACTIONS, AI_HINTS } = require('../constants/index.cjs');
const logger = require('../logger/index.cjs');

class SSHManager {
  constructor(container) {
    this.container = container;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ —á–µ—Ä–µ–∑ DI
  _getProfileService() {
    return this.container.get('profileService');
  }

  _getQueryService() {
    return this.container.get('queryService');
  }

  _getValidationService() {
    return this.container.get('validationService');
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  async setupProfile(args) {
    const { profile_name = 'default', host, port, username, password } = args;

    try {
      const config = {
        host: this._sanitize(host),
        port: port || 22,
        username: this._sanitize(username),
        password: password
      };

      const result = await this._getProfileService().createProfile('ssh', profile_name, config);

      return {
        message: `–ü—Ä–æ—Ñ–∏–ª—å SSH '${profile_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω`,
        profile_name,
        host: config.host,
        port: config.port,
        ai_hint: AI_HINTS.SETUP_COMPLETE
      };
    } catch (error) {
      logger.error('SSH profile setup failed', { profile_name, error: error.message });
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π
  async listProfiles() {
    try {
      const profiles = this._getProfileService().listProfiles('ssh');
      
      return {
        profiles: profiles.map(p => ({
          name: p.name,
          host: p.host,
          port: p.port,
          created_at: p.createdAt,
          last_used: p.lastUsed
        })),
        count: profiles.length,
        ai_hint: "–°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π SSH"
      };
    } catch (error) {
      logger.error('Failed to list SSH profiles', { error: error.message });
      throw error;
    }
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
  async executeCommand(args) {
    const { command, profile_name = 'default' } = args;
    
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã
      this._validateCommand(command);
      
      const result = await this._getQueryService().executeSSH('ssh', profile_name, command);
      
      return {
        command,
        stdout: result.stdout,
        stderr: result.stderr,
        exit_code: result.exitCode,
        success: result.exitCode === 0,
        ai_hint: result.exitCode === 0 ? 
          "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ" : 
          "–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π"
      };
    } catch (error) {
      logger.error('SSH command failed', { 
        profile_name, 
        command: command?.substring(0, 100), 
        error: error.message 
      });
      throw error;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ
  async getSystemInfo(args) {
    const { profile_name = 'default' } = args;
    
    const commands = {
      hostname: 'hostname',
      uptime: 'uptime',
      memory: 'free -h',
      disk: 'df -h',
      cpu: 'lscpu | grep "Model name"',
      os: 'cat /etc/os-release | grep PRETTY_NAME',
      load: 'cat /proc/loadavg'
    };

    try {
      const systemInfo = {};
      
      for (const [key, command] of Object.entries(commands)) {
        try {
          const result = await this._getQueryService().executeSSH('ssh', profile_name, command);
          systemInfo[key] = {
            output: result.stdout.trim(),
            success: result.exitCode === 0
          };
        } catch (error) {
          systemInfo[key] = {
            output: `Error: ${error.message}`,
            success: false
          };
        }
      }

      return {
        system_info: systemInfo,
        profile_name,
        ai_hint: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ –ø–æ–ª—É—á–µ–Ω–∞"
      };
    } catch (error) {
      logger.error('Failed to get system info', { profile_name, error: error.message });
      throw error;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ö–æ—Å—Ç–∞
  async checkHost(args) {
    const { host, timeout = 5 } = args;
    
    try {
      this._getValidationService().sanitizeInput(host);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      const tempConfig = {
        host: host,
        port: 22,
        username: 'test', // –ù–µ –≤–∞–∂–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        password: 'test'
      };

      // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
      const startTime = Date.now();
      let accessible = false;
      let error = null;

      try {
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ ConnectionService
        accessible = true;
      } catch (err) {
        error = err.message;
      }

      const responseTime = Date.now() - startTime;

      return {
        host,
        accessible,
        response_time: responseTime,
        error,
        ai_hint: accessible ? 
          `–•–æ—Å—Ç ${host} –¥–æ—Å—Ç—É–ø–µ–Ω (${responseTime}ms)` : 
          `–•–æ—Å—Ç ${host} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error}`
      };
    } catch (error) {
      logger.error('Host check failed', { host, error: error.message });
      throw error;
    }
  }

  // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
  async runSafeCommand(args) {
    const { command_type, profile_name = 'default' } = args;
    
    const safeCommands = {
      'disk_usage': 'df -h',
      'memory_usage': 'free -h',
      'process_list': 'ps aux | head -20',
      'network_info': 'ip addr show',
      'system_load': 'uptime',
      'who_logged': 'who',
      'date_time': 'date',
      'kernel_version': 'uname -a'
    };

    const command = safeCommands[command_type];
    if (!command) {
      throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–º–∞–Ω–¥—ã: ${command_type}`);
    }

    return await this.executeCommand({
      command,
      profile_name
    });
  }

  // –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π
  async handleAction(args) {
    const { action } = args;
    
    try {
      this._getValidationService().validateSSHAction(action);
      
      switch (action) {
        case ACTIONS.SSH.SETUP_PROFILE:
          return await this.setupProfile(args);
        case ACTIONS.SSH.LIST_PROFILES:
          return await this.listProfiles(args);
        case ACTIONS.SSH.EXECUTE:
          return await this.executeCommand(args);
        case ACTIONS.SSH.SYSTEM_INFO:
          return await this.getSystemInfo(args);
        case ACTIONS.SSH.CHECK_HOST:
          return await this.checkHost(args);
        default:
          throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ SSH: ${action}`);
      }
    } catch (error) {
      logger.error('SSH action failed', { action, error: error.message });
      throw error;
    }
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã
  _validateCommand(command) {
    // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if (!command || typeof command !== 'string') {
      throw new Error('–ö–æ–º–∞–Ω–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π');
    }

    // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ ValidationService
    this._getValidationService().checkCommandInjection(command, 'ssh_command');
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    this._checkDangerousCommands(command);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–∞—Å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
  _checkDangerousCommands(command) {
    const dangerousPatterns = [
      /rm\s+-rf\s+\/|rm\s+-rf\s+\*/gi,        // –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω—è
      /dd\s+if=.*of=/gi,                       // –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å –¥–∏—Å–∫–æ–≤
      /mkfs/gi,                                // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      /fdisk/gi,                               // –†–∞–±–æ—Ç–∞ —Å –¥–∏—Å–∫–∞–º–∏
      /shutdown|poweroff|halt|reboot/gi,       // –í—ã–∫–ª—é—á–µ–Ω–∏–µ
      /init\s+[0-6]/gi,                        // –°–º–µ–Ω–∞ runlevel
      /killall/gi,                             // –£–±–∏–π—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
      /\/etc\/passwd|\/etc\/shadow/gi,         // –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
      /iptables.*-F/gi,                        // –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–µ—Ä–≤–æ–ª–∞
      /crontab.*-r/gi                          // –£–¥–∞–ª–µ–Ω–∏–µ cron
    ];

    for (const pattern of dangerousPatterns) {
      if (pattern.test(command)) {
        throw new Error('–ö–æ–º–∞–Ω–¥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞');
      }
    }
  }

  // –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  _sanitize(input) {
    return this._getValidationService().sanitizeInput(input);
  }
}

module.exports = SSHManager; 