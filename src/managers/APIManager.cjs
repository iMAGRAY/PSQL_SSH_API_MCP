#!/usr/bin/env node

/**
 * üåê API MANAGER
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞–º–∏ —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
 */

const https = require('https');
const http = require('http');
const { URL } = require('url');
const Constants = require('../constants/Constants.cjs');

class APIManager {
  constructor(logger, security, validation) {
    this.logger = logger;
    this.security = security;
    this.validation = validation;
    
    // –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä—ã)
    this.stats = {
      requests: 0,
      get_requests: 0,
      post_requests: 0,
      put_requests: 0,
      delete_requests: 0,
      patch_requests: 0,
      errors: 0
    };
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–∫–æ–ª—å–∑—è—â–µ–µ –æ–∫–Ω–æ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    this.slidingWindow = {
      windowSize: Constants.BUFFERS.SLIDING_WINDOW_SIZE,      // –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤)
      maxAge: Constants.TIMEOUTS.STATISTICS_WINDOW,       // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∑–∞–ø–∏—Å–∏ (1 —á–∞—Å)
      requests: [],          // –ú–∞—Å—Å–∏–≤ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å timestamp
      currentIndex: 0,       // –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –∑–∞–ø–∏—Å–∏
      isLocked: false        // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è concurrent access
    };
    
    // –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
    this.cleanupInterval = setInterval(() => {
      this.safeCleanupOldRecords();
    }, Constants.RATE_LIMIT.CLEANUP_INTERVAL);
  }

  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Å–∫–æ–ª—å–∑—è—â–µ–µ –æ–∫–Ω–æ
  addToSlidingWindow(type, success = true) {
    if (this.slidingWindow.isLocked) {
      // –ï—Å–ª–∏ –æ–∫–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å
      return;
    }
    
    const now = Date.now();
    const record = {
      timestamp: now,
      type,
      success
    };
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫—Ä—É–≥–æ–≤–∞—è –∑–∞–º–µ–Ω–∞ –≤ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –º–∞—Å—Å–∏–≤–µ
    if (this.slidingWindow.requests.length < this.slidingWindow.windowSize) {
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü, –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Å—Ç–æ
      this.slidingWindow.requests.push(record);
    } else {
      // –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å
      const index = this.slidingWindow.currentIndex;
      this.slidingWindow.requests[index] = record;
      this.slidingWindow.currentIndex = (index + 1) % this.slidingWindow.windowSize;
    }
  }

  // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π
  async safeCleanupOldRecords() {
    if (this.slidingWindow.isLocked) {
      return; // –£–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ—á–∏—Å—Ç–∫–∞
    }
    
    this.slidingWindow.isLocked = true;
    
    try {
      const now = Date.now();
      const cutoff = now - this.slidingWindow.maxAge;
      const originalLength = this.slidingWindow.requests.length;
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏
      const validRecords = this.slidingWindow.requests.filter(
        record => record && record.timestamp > cutoff
      );
      
      // –ê—Ç–æ–º–∞—Ä–Ω–∞—è –∑–∞–º–µ–Ω–∞ –º–∞—Å—Å–∏–≤–∞
      this.slidingWindow.requests = validRecords;
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç overflow
      if (this.slidingWindow.currentIndex >= validRecords.length) {
        this.slidingWindow.currentIndex = validRecords.length > 0 ? 
          validRecords.length % this.slidingWindow.windowSize : 0;
      }
      
      this.logger.debug('Cleaned up old API records', {
        originalLength,
        remaining: validRecords.length,
        windowSize: this.slidingWindow.windowSize,
        currentIndex: this.slidingWindow.currentIndex
      });
      
    } catch (error) {
      this.logger.error('Error during sliding window cleanup', { error: error.message });
    } finally {
      this.slidingWindow.isLocked = false;
    }
  }

  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ –æ–∫–Ω–∞
  getSlidingWindowStats() {
    if (this.slidingWindow.isLocked) {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –æ–∫–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ
      return {
        last_hour: { total: 0, successful: 0, failed: 0, get: 0, post: 0, put: 0, delete: 0, patch: 0 },
        last_minute: { total: 0, successful: 0, failed: 0 }
      };
    }
    
    const now = Date.now();
    const oneHourAgo = now - Constants.TIMEOUTS.STATISTICS_WINDOW;
    const oneMinuteAgo = now - Constants.TIMEOUTS.STATISTICS_MINUTE;
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ø–∏–∏ –º–∞—Å—Å–∏–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    const requestsCopy = [...this.slidingWindow.requests];
    
    const recentRequests = requestsCopy.filter(r => r && r.timestamp > oneHourAgo);
    const lastMinuteRequests = requestsCopy.filter(r => r && r.timestamp > oneMinuteAgo);
    
    return {
      last_hour: {
        total: recentRequests.length,
        successful: recentRequests.filter(r => r.success).length,
        failed: recentRequests.filter(r => !r.success).length,
        get: recentRequests.filter(r => r.type === 'GET').length,
        post: recentRequests.filter(r => r.type === 'POST').length,
        put: recentRequests.filter(r => r.type === 'PUT').length,
        delete: recentRequests.filter(r => r.type === 'DELETE').length,
        patch: recentRequests.filter(r => r.type === 'PATCH').length
      },
      last_minute: {
        total: lastMinuteRequests.length,
        successful: lastMinuteRequests.filter(r => r.success).length,
        failed: lastMinuteRequests.filter(r => !r.success).length
      }
    };
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π API
  async handleAction(args) {
    const { action, url, ...params } = args;
    
    try {
      this.logger.info('API action requested', { action, url: url?.substring(0, Constants.LIMITS.LOG_SUBSTRING_LENGTH) });
      
      switch (action) {
        case 'get':
          return await this.get(url, params);
        case 'post':
          return await this.post(url, params);
        case 'put':
          return await this.put(url, params);
        case 'delete':
          return await this.delete(url, params);
        case 'patch':
          return await this.patch(url, params);
        case 'check_api':
          return await this.checkAPI(url, params);
        default:
          throw new Error(`Unknown action: ${action}`);
      }
    } catch (error) {
      this.stats.errors++;
      this.addToSlidingWindow(action?.toUpperCase() || 'UNKNOWN', false);
      this.logger.error('API action failed', { 
        action, 
        url: url?.substring(0, Constants.LIMITS.LOG_SUBSTRING_LENGTH), 
        error: error.message 
      });
      throw error;
    }
  }

  // GET –∑–∞–ø—Ä–æ—Å
  async get(url, params = {}) {
    try {
      const { headers = {}, auth_token } = params;
      
      this.stats.get_requests++;
      this.stats.requests++;
      this.addToSlidingWindow('GET');
      
      const requestHeaders = this.prepareHeaders(headers, auth_token);
      const response = await this.makeRequest('GET', url, null, requestHeaders);
      
      this.logger.info('GET request completed', { 
        url: url?.substring(0, Constants.LIMITS.LOG_SUBSTRING_LENGTH), 
        status: response.statusCode 
      });
      
      return {
        success: true,
        method: 'GET',
        url,
        status: response.statusCode,
        headers: response.headers,
        data: response.data
      };
      
    } catch (error) {
      this.addToSlidingWindow('GET', false);
      this.logger.error('GET request failed', { 
        url: url?.substring(0, Constants.LIMITS.LOG_SUBSTRING_LENGTH), 
        error: error.message 
      });
      throw error;
    }
  }

  // POST –∑–∞–ø—Ä–æ—Å
  async post(url, params = {}) {
    try {
      const { data = {}, headers = {}, auth_token } = params;
      
      this.stats.post_requests++;
      this.stats.requests++;
      this.addToSlidingWindow('POST');
      
      const requestHeaders = this.prepareHeaders(headers, auth_token);
      const response = await this.makeRequest('POST', url, data, requestHeaders);
      
      this.logger.info('POST request completed', { 
        url: url?.substring(0, Constants.LIMITS.LOG_SUBSTRING_LENGTH), 
        status: response.statusCode 
      });
      
      return {
        success: true,
        method: 'POST',
        url,
        status: response.statusCode,
        headers: response.headers,
        data: response.data
      };
      
    } catch (error) {
      this.addToSlidingWindow('POST', false);
      this.logger.error('POST request failed', { 
        url: url?.substring(0, Constants.LIMITS.LOG_SUBSTRING_LENGTH), 
        error: error.message 
      });
      throw error;
    }
  }

  // PUT –∑–∞–ø—Ä–æ—Å
  async put(url, params = {}) {
    try {
      const { data = {}, headers = {}, auth_token } = params;
      
      this.stats.put_requests++;
      this.stats.requests++;
      this.addToSlidingWindow('PUT');
      
      const requestHeaders = this.prepareHeaders(headers, auth_token);
      const response = await this.makeRequest('PUT', url, data, requestHeaders);
      
      this.logger.info('PUT request completed', { 
        url: url?.substring(0, Constants.LIMITS.LOG_SUBSTRING_LENGTH), 
        status: response.statusCode 
      });
      
      return {
        success: true,
        method: 'PUT',
        url,
        status: response.statusCode,
        headers: response.headers,
        data: response.data
      };
      
    } catch (error) {
      this.addToSlidingWindow('PUT', false);
      this.logger.error('PUT request failed', { 
        url: url?.substring(0, Constants.LIMITS.LOG_SUBSTRING_LENGTH), 
        error: error.message 
      });
      throw error;
    }
  }

  // DELETE –∑–∞–ø—Ä–æ—Å
  async delete(url, params = {}) {
    try {
      const { headers = {}, auth_token } = params;
      
      this.stats.delete_requests++;
      this.stats.requests++;
      this.addToSlidingWindow('DELETE');
      
      const requestHeaders = this.prepareHeaders(headers, auth_token);
      const response = await this.makeRequest('DELETE', url, null, requestHeaders);
      
      this.logger.info('DELETE request completed', { 
        url: url?.substring(0, Constants.LIMITS.LOG_SUBSTRING_LENGTH), 
        status: response.statusCode 
      });
      
      return {
        success: true,
        method: 'DELETE',
        url,
        status: response.statusCode,
        headers: response.headers,
        data: response.data
      };
      
    } catch (error) {
      this.addToSlidingWindow('DELETE', false);
      this.logger.error('DELETE request failed', { 
        url: url?.substring(0, Constants.LIMITS.LOG_SUBSTRING_LENGTH), 
        error: error.message 
      });
      throw error;
    }
  }

  // PATCH –∑–∞–ø—Ä–æ—Å
  async patch(url, params = {}) {
    try {
      const { data = {}, headers = {}, auth_token } = params;
      
      this.stats.patch_requests++;
      this.stats.requests++;
      this.addToSlidingWindow('PATCH');
      
      const requestHeaders = this.prepareHeaders(headers, auth_token);
      const response = await this.makeRequest('PATCH', url, data, requestHeaders);
      
      this.logger.info('PATCH request completed', { 
        url: url?.substring(0, Constants.LIMITS.LOG_SUBSTRING_LENGTH), 
        status: response.statusCode 
      });
      
      return {
        success: true,
        method: 'PATCH',
        url,
        status: response.statusCode,
        headers: response.headers,
        data: response.data
      };
      
    } catch (error) {
      this.addToSlidingWindow('PATCH', false);
      this.logger.error('PATCH request failed', { 
        url: url?.substring(0, Constants.LIMITS.LOG_SUBSTRING_LENGTH), 
        error: error.message 
      });
      throw error;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ API
  async checkAPI(url, params = {}) {
    try {
      const { headers = {}, auth_token } = params;
      
      // –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ URL
      if (!this.security.validateUrl(url)) {
        throw new Error('Invalid or potentially dangerous URL');
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
      const startTime = Date.now();
      const requestHeaders = this.prepareHeaders(headers, auth_token);
      
      try {
        const response = await this.makeRequest('GET', url, null, requestHeaders);
        const responseTime = Date.now() - startTime;
        
        this.logger.info('API check completed', { 
          url: url?.substring(0, Constants.LIMITS.LOG_SUBSTRING_LENGTH), 
          status: response.statusCode,
          responseTime 
        });
        
        return {
          success: true,
          url,
          status: response.statusCode,
          response_time: responseTime,
          accessible: true,
          headers: response.headers,
          content_type: response.headers['content-type'] || 'unknown'
        };
        
      } catch (error) {
        const responseTime = Date.now() - startTime;
        
        return {
          success: false,
          url,
          accessible: false,
          response_time: responseTime,
          error: error.message
        };
      }
      
    } catch (error) {
      this.logger.error('API check failed', { 
        url: url?.substring(0, Constants.LIMITS.LOG_SUBSTRING_LENGTH), 
        error: error.message 
      });
      throw error;
    }
  }

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
  prepareHeaders(headers = {}, authToken = null) {
    const requestHeaders = {
      'User-Agent': 'MCP-API-Client/4.0.0',
      'Accept': 'application/json, text/plain, */*',
      'Content-Type': 'application/json',
      ...headers
    };

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (authToken) {
      requestHeaders['Authorization'] = `Bearer ${authToken}`;
    }

    // –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const sanitizedHeaders = {};
    for (const [key, value] of Object.entries(requestHeaders)) {
      if (typeof key === 'string' && typeof value === 'string') {
        // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        const sanitizedKey = key.replace(/[^\w-]/g, '');
        const sanitizedValue = value.replace(/[\r\n]/g, '');
        
        if (sanitizedKey && sanitizedValue) {
          sanitizedHeaders[sanitizedKey] = sanitizedValue;
        }
      }
    }

    return sanitizedHeaders;
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞
  async makeRequest(method, url, data = null, headers = {}) {
    return new Promise((resolve, reject) => {
      try {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è URL
        const urlValidation = this.validation.validateHttpUrl(url);
        if (!urlValidation.valid) {
          throw new Error(`URL validation failed: ${urlValidation.errors.join(', ')}`);
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if (!this.security.validateUrl(url)) {
          throw new Error('URL security validation failed');
        }

        const parsedUrl = new URL(url);
        const isHttps = parsedUrl.protocol === 'https:';
        const httpModule = isHttps ? https : http;

        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        let requestData = '';
        if (data && ['POST', 'PUT', 'PATCH'].includes(method)) {
          requestData = JSON.stringify(data);
          headers['Content-Length'] = Buffer.byteLength(requestData);
        }

        const options = {
          hostname: parsedUrl.hostname,
          port: parsedUrl.port || (isHttps ? 443 : 80),
          path: parsedUrl.pathname + parsedUrl.search,
          method,
          headers,
          timeout: Constants.NETWORK.TIMEOUT_SSH_COMMAND
        };

        const req = httpModule.request(options, (res) => {
          let responseData = '';
          
          res.on('data', (chunk) => {
            responseData += chunk;
            
            // –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
            if (responseData.length > Constants.LIMITS.MAX_DATA_SIZE) { // 10MB
              req.destroy();
              reject(new Error('Response too large'));
              return;
            }
          });

          res.on('end', () => {
            try {
              let parsedData;
              
              // –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
              if (res.headers['content-type']?.includes('application/json')) {
                try {
                  parsedData = JSON.parse(responseData);
                } catch (error) {
                  parsedData = responseData;
                }
              } else {
                parsedData = responseData;
              }

              resolve({
                statusCode: res.statusCode,
                headers: res.headers,
                data: parsedData
              });
            } catch (error) {
              reject(error);
            }
          });
        });

        req.on('error', (error) => {
          reject(error);
        });

        req.on('timeout', () => {
          req.destroy();
          reject(new Error('Request timeout'));
        });

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if (requestData) {
          req.write(requestData);
        }
        
        req.end();
        
      } catch (error) {
        reject(error);
      }
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
  getStats() {
    const slidingStats = this.getSlidingWindowStats();
    
    return {
      total_stats: { ...this.stats },
      sliding_window: slidingStats,
      memory_usage: {
        window_size: this.slidingWindow.requests.length,
        max_window_size: this.slidingWindow.windowSize,
        memory_efficiency: `${((this.slidingWindow.requests.length / this.slidingWindow.windowSize) * Constants.LIMITS.DEFAULT_QUERY_LIMIT).toFixed(1)}%`
      }
    };
  }

  // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  async cleanup() {
    try {
      // –û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
      if (this.cleanupInterval) {
        clearInterval(this.cleanupInterval);
        this.cleanupInterval = null;
      }
      
      // –û—á–∏—Å—Ç–∫–∞ —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ –æ–∫–Ω–∞
      this.slidingWindow.requests = [];
      this.slidingWindow.currentIndex = 0;
      
      this.logger.info('API manager cleaned up');
    } catch (error) {
      this.logger.error('Failed to cleanup API manager', { error: error.message });
      throw error;
    }
  }
}

function createAPIManager(logger, security, validation) {
  return new APIManager(logger, security, validation);
}

module.exports = APIManager; 