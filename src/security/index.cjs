// üîê –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–´ –° CREDENTIALS
// –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π –≤ –ø–∞–º—è—Ç–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ

const crypto = require('crypto');
const { SECURITY_LIMITS } = require('../constants/index.cjs');
const logger = require('../logger/index.cjs');

class SecurityManager {
  constructor() {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    this.encryptionKey = crypto.randomBytes(32);
    this.connections = new Map();
    this.connectionCount = 0;
  }

  // –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
  encrypt(text) {
    if (!text) return null;
    
    try {
      const iv = crypto.randomBytes(16);
      const cipher = crypto.createCipheriv('aes-256-cbc', this.encryptionKey, iv);
      
      let encrypted = cipher.update(text, 'utf8', 'hex');
      encrypted += cipher.final('hex');
      
      return {
        encrypted,
        iv: iv.toString('hex')
      };
    } catch (error) {
      logger.error('Encryption failed', { error: error.message });
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å');
    }
  }

  // –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ø–∞—Ä–æ–ª—è
  decrypt(encryptedData) {
    if (!encryptedData) return null;
    
    try {
      const decipher = crypto.createDecipheriv('aes-256-cbc', this.encryptionKey, Buffer.from(encryptedData.iv, 'hex'));
      
      let decrypted = decipher.update(encryptedData.encrypted, 'hex', 'utf8');
      decrypted += decipher.final('utf8');
      
      return decrypted;
    } catch (error) {
      logger.error('Decryption failed', { error: error.message });
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å');
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  saveProfile(type, profileName, config) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    if (this.connectionCount >= SECURITY_LIMITS.MAX_CONNECTIONS) {
      throw new Error(`–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: ${SECURITY_LIMITS.MAX_CONNECTIONS}`);
    }

    // –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∫–æ–ø–∏—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const secureConfig = { ...config };
    
    // –®–∏—Ñ—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    if (secureConfig.password) {
      secureConfig.password = this.encrypt(secureConfig.password);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    const profileKey = `${type}:${profileName}`;
    this.connections.set(profileKey, {
      type,
      config: secureConfig,
      createdAt: new Date().toISOString(),
      lastUsed: new Date().toISOString()
    });
    
    this.connectionCount++;
    
    logger.info('Profile saved', { type, profileName, host: config.host });
    
    return profileKey;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  getProfile(type, profileName) {
    const profileKey = `${type}:${profileName}`;
    const profile = this.connections.get(profileKey);
    
    if (!profile) {
      return null;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    profile.lastUsed = new Date().toISOString();
    
    // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
    const config = { ...profile.config };
    if (config.password) {
      config.password = this.decrypt(config.password);
    }
    
    return {
      ...profile,
      config
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
  getProfilesByType(type) {
    const profiles = [];
    
    for (const [key, profile] of this.connections) {
      if (profile.type === type) {
        const profileName = key.split(':')[1];
        profiles.push({
          name: profileName,
          type: profile.type,
          host: profile.config.host,
          port: profile.config.port,
          createdAt: profile.createdAt,
          lastUsed: profile.lastUsed
        });
      }
    }
    
    return profiles;
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
  validatePassword(password) {
    if (!password || typeof password !== 'string') {
      throw new Error('–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    }
    
    if (password.length < SECURITY_LIMITS.PASSWORD_MIN_LENGTH) {
      throw new Error(`–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º ${SECURITY_LIMITS.PASSWORD_MIN_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤`);
    }
    
    return true;
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ö–æ—Å—Ç–∞
  validateHost(host) {
    if (!host || typeof host !== 'string') {
      throw new Error('–•–æ—Å—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    if (!/^[a-zA-Z0-9.-]+$/.test(host)) {
      throw new Error('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∏–º–µ–Ω–∏ —Ö–æ—Å—Ç–∞');
    }
    
    return true;
  }

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
  clearProfiles() {
    const count = this.connections.size;
    this.connections.clear();
    this.connectionCount = 0;
    
    logger.info('All profiles cleared', { count });
    return count;
  }

  // –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  destroy() {
    this.clearProfiles();
    this.encryptionKey = null;
    logger.info('Security manager destroyed');
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
const securityManager = new SecurityManager();

module.exports = securityManager; 