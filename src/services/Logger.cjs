#!/usr/bin/env node

/**
 * üìù LOGGER SERVICE
 * –°–∏—Å—Ç–µ–º–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–µ–π –∏ —Ä–æ—Ç–∞—Ü–∏–µ–π
 */

const fs = require('fs');
const path = require('path');
const util = require('util');

class Logger {
  constructor() {
    this.levels = {
      error: 0,
      warn: 1, 
      info: 2,
      debug: 3
    };
    
    this.currentLevel = this.levels.info;
    this.stats = {
      errors: 0,
      warnings: 0,
      infos: 0,
      debugs: 0,
      buffer_size: 0,
      writes: 0
    };
    
    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è
    this.buffer = [];
    this.bufferSize = 100; // –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
    this.flushInterval = 5000; // –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–±—Ä–æ—Å–∞ –±—É—Ñ–µ—Ä–∞ (5 —Å–µ–∫)
    this.maxLogSize = 10 * 1024 * 1024; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ª–æ–≥-—Ñ–∞–π–ª–∞ (10MB)
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–π–ª–æ–≤
    this.logDir = process.env.LOG_DIR || './logs';
    this.logFile = path.join(this.logDir, 'app.log');
    this.errorFile = path.join(this.logDir, 'error.log');
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤
    this.ensureLogDir();
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å –±—É—Ñ–µ—Ä–∞
    this.flushTimer = setInterval(() => {
      this.flushBuffer();
    }, this.flushInterval);
    
    // Graceful shutdown
    process.on('SIGINT', () => this.shutdown());
    process.on('SIGTERM', () => this.shutdown());
  }

  ensureLogDir() {
    try {
      if (!fs.existsSync(this.logDir)) {
        fs.mkdirSync(this.logDir, { recursive: true });
      }
    } catch (error) {
      console.error('Failed to create log directory:', error);
    }
  }

  setLevel(level) {
    if (this.levels[level] !== undefined) {
      this.currentLevel = this.levels[level];
    }
  }

  // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ –±—É—Ñ–µ—Ä
  async writeLog(level, message, meta = {}) {
    const timestamp = new Date().toISOString();
    const logEntry = {
      timestamp,
      level,
      message,
      meta,
      pid: process.pid
    };
    
    this.buffer.push(logEntry);
    this.stats.buffer_size = this.buffer.length;
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±—É—Ñ–µ—Ä–∞
    if (this.buffer.length >= this.bufferSize) {
      setImmediate(() => this.flushBuffer());
    }
    
    return logEntry;
  }

  // –°–±—Ä–æ—Å –±—É—Ñ–µ—Ä–∞ –≤ —Ñ–∞–π–ª
  async flushBuffer() {
    if (this.buffer.length === 0) return;
    
    const entries = this.buffer.slice();
    this.buffer.length = 0;
    this.stats.buffer_size = 0;
    
    try {
      // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º
      const regularLogs = [];
      const errorLogs = [];
      
      for (const entry of entries) {
        const formatted = this.formatLogEntry(entry);
        
        if (entry.level === 'error') {
          errorLogs.push(formatted);
        }
        regularLogs.push(formatted);
      }
      
      // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª—ã
      const writePromises = [];
      
      if (regularLogs.length > 0) {
        writePromises.push(this.writeToFile(this.logFile, regularLogs.join('\n') + '\n'));
      }
      
      if (errorLogs.length > 0) {
        writePromises.push(this.writeToFile(this.errorFile, errorLogs.join('\n') + '\n'));
      }
      
      await Promise.all(writePromises);
      this.stats.writes++;
      
    } catch (error) {
      console.error('Failed to flush log buffer:', error);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ –±—É—Ñ–µ—Ä –ø—Ä–∏ –æ—à–∏–±–∫–µ
      this.buffer.unshift(...entries);
      this.stats.buffer_size = this.buffer.length;
    }
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞
  formatLogEntry(entry) {
    const icon = this.getLevelIcon(entry.level);
    const metaStr = Object.keys(entry.meta).length > 0 ? 
      ' | ' + util.inspect(entry.meta, { depth: 2, colors: false }) : '';
    
    return `${icon} [${entry.level.toUpperCase()}] ${entry.timestamp} [PID:${entry.pid}] - ${entry.message}${metaStr}`;
  }

  getLevelIcon(level) {
    const icons = {
      error: '‚ùå',
      warn: '‚ö†Ô∏è',
      info: '‚ÑπÔ∏è',
      debug: 'üêõ'
    };
    return icons[level] || 'üìù';
  }

  // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
  async writeToFile(filename, content) {
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏
      await this.rotateLogIfNeeded(filename);
      
      // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å
      await fs.promises.appendFile(filename, content, 'utf8');
      
    } catch (error) {
      console.error(`Failed to write to log file ${filename}:`, error);
      throw error;
    }
  }

  // –†–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤
  async rotateLogIfNeeded(filename) {
    try {
      const stats = await fs.promises.stat(filename);
      
      if (stats.size > this.maxLogSize) {
        const rotatedName = `${filename}.${Date.now()}`;
        await fs.promises.rename(filename, rotatedName);
        
        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        await this.cleanupOldLogs(path.dirname(filename));
      }
    } catch (error) {
      if (error.code !== 'ENOENT') {
        console.error('Failed to rotate log:', error);
      }
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
  async cleanupOldLogs(logDir, maxFiles = 10) {
    try {
      const files = await fs.promises.readdir(logDir);
      const logFiles = files
        .filter(file => file.startsWith('app.log.') || file.startsWith('error.log.'))
        .map(file => ({
          name: file,
          path: path.join(logDir, file),
          mtime: fs.statSync(path.join(logDir, file)).mtime
        }))
        .sort((a, b) => b.mtime - a.mtime);

      // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å–≤–µ—Ä—Ö –ª–∏–º–∏—Ç–∞
      if (logFiles.length > maxFiles) {
        const filesToDelete = logFiles.slice(maxFiles);
        await Promise.all(filesToDelete.map(file => 
          fs.promises.unlink(file.path).catch(err => 
            console.error(`Failed to delete old log ${file.name}:`, err)
          )
        ));
      }
    } catch (error) {
      console.error('Failed to cleanup old logs:', error);
    }
  }

  // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  async error(message, meta = {}) {
    this.stats.errors++;
    if (this.currentLevel >= this.levels.error) {
      // –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ console –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
      console.error(`‚ùå [ERROR] ${new Date().toISOString()} - ${message}`, meta);
      return await this.writeLog('error', message, meta);
    }
  }

  async warn(message, meta = {}) {
    this.stats.warnings++;
    if (this.currentLevel >= this.levels.warn) {
      console.warn(`‚ö†Ô∏è  [WARN]  ${new Date().toISOString()} - ${message}`, meta);
      return await this.writeLog('warn', message, meta);
    }
  }

  async info(message, meta = {}) {
    this.stats.infos++;
    if (this.currentLevel >= this.levels.info) {
      console.info(`‚ÑπÔ∏è  [INFO]  ${new Date().toISOString()} - ${message}`, meta);
      return await this.writeLog('info', message, meta);
    }
  }

  async debug(message, meta = {}) {
    this.stats.debugs++;
    if (this.currentLevel >= this.levels.debug) {
      console.debug(`üêõ [DEBUG] ${new Date().toISOString()} - ${message}`, meta);
      return await this.writeLog('debug', message, meta);
    }
  }

  getStats() {
    return { 
      ...this.stats,
      logDir: this.logDir,
      bufferSize: this.bufferSize,
      flushInterval: this.flushInterval
    };
  }

  // Graceful shutdown
  async shutdown() {
    if (this.flushTimer) {
      clearInterval(this.flushTimer);
      this.flushTimer = null;
    }
    
    // –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –±—É—Ñ–µ—Ä–∞
    await this.flushBuffer();
  }

  async cleanup() {
    await this.shutdown();
  }
}

function createLogger() {
  return new Logger();
}

module.exports = { createLogger, Logger }; 